%{ 	 
#include <math.h> 
#include <stdio.h>

int lines = 0;
%} 
%option noyywrap

DIGIT 		[0-9]
WORD		["]([a-zA-Z])*["]
NUMBER		[1-9][0-9]*|0
NR_REAL		{NUMBER}+"."{DIGIT}*
CST		{WORD}|{NUMBER}|{NR_REAL}
ID 		[a-zA-Z][a-zA-Z0-9]{0,7}

%% 

"NO"	{printf( "Reserved word: %s\n", yytext );  return NO;}
"OVER"	{printf( "Reserved word: %s\n", yytext );  return OVER;}
"READ"	{printf( "Reserved word: %s\n", yytext );  return READ;}
"SEE"	{printf( "Reserved word: %s\n", yytext );  return SEE;}
"ELSE"	{printf( "Reserved word: %s\n", yytext );  return ELSE;}
"BOOL"	{printf( "Reserved word: %s\n", yytext );  return BOOL;}
"IF"	{printf( "Reserved word: %s\n", yytext );  return IF;}
"MEANTIME"	{printf( "Reserved word: %s\n", yytext );  return MEANTIME;}
"FOR"	{printf( "Reserved word: %s\n", yytext );  return FOR;}
"PRINT"	{printf( "Reserved word: %s\n", yytext );  return PRINT;}
"WRITE"	{printf( "Reserved word: %s\n", yytext );  return WRITE;}
"BRING"	{printf( "Reserved word: %s\n", yytext );  return BRING;}
"STRING"	{printf( "Reserved word: %s\n", yytext );  return STRING;}
"PAS"	{printf( "Reserved word: %s\n", yytext );  return PAS;}
"START"	{printf( "Reserved word: %s\n", yytext );  return START;}
"STOP"	{printf( "Reserved word: %s\n", yytext );  return STOP;}
"BUCATICA"	{printf( "Reserved word: %s\n", yytext );  return BUCATICA;}
"NUMAR"	{printf( "Reserved word: %s\n", yytext );  return NUMAR;}
"COMBINATIE"	{printf( "Reserved word: %s\n", yytext );  return COMBINATIE;}
"GATA"	{printf( "Reserved word: %s\n", yytext );  return GATA;}
"PLUS_CA"	{printf( "Reserved word: %s\n", yytext );  return PLUS_CA;}
"ORI"	{printf( "Reserved word: %s\n", yytext );  return ORI;}
"NU"	{printf( "Reserved word: %s\n", yytext );  return NU;}
"OTHERWISE"	{printf( "Reserved word: %s\n", yytext );  return OTHERWISE;}
"LANT"	{printf( "Reserved word: %s\n", yytext );  return LANT;}
"DE"	{printf( "Reserved word: %s\n", yytext );  return DE;}

{ID}	{printf( "Identifier: %s\n", yytext ); return IDENTIFIER;}

{CST}	{printf( "Constant: %s\n", yytext ); return CONSTANT;}

":"	{printf( "Separator: %s\n", yytext ); return COLON;}
";"	{printf( "Separator: %s\n", yytext ); return SEMI_COLON;}
","	{printf( "Separator: %s\n", yytext ); return COMA;}
"."	{printf( "Separator: %s\n", yytext ); return DOT;}
"+"	{printf( "Operator: %s\n", yytext ); return PLUS;}
"-"	{printf( "Operator: %s\n", yytext ); return MINUS;}
"*"	{printf( "Operator: %s\n", yytext ); return MULTIPLY;}
"/"	{printf( "Operator: %s\n", yytext ); return DIVISION;}
"("	{printf( "Separator: %s\n", yytext ); return LEFT_ROUND_PARENTHESIS;}
")"	{printf( "Separator: %s\n", yytext ); return RIGHT_ROUND_PARENTHESIS;}
"["	{printf( "Separator: %s\n", yytext ); return LEFT_SQUARE_PARENTHESIS;}
"]"	{printf( "Separator: %s\n", yytext ); return RIGHT_SQUARE_PARENTHESIS;}
"<"	{printf( "Operator: %s\n", yytext ); return LESS_THAN;}
">"	{printf( "Operator: %s\n", yytext ); return GREATER_THAN;}
"<="	{printf( "Operator: %s\n", yytext ); return LESS_OR_EQUAL_THAN;}
">="	{printf( "Operator: %s\n", yytext ); return GREATER_OR_EQUAL_THAN;}
"<>"	{printf( "Operator: %s\n", yytext ); return DIFFERENT;}
"="	{printf( "Operator: %s\n", yytext ); return EQUAL;}
":="	{printf( "Separator: %s\n", yytext ); return ASSIGNMENT;}
"|"	{printf( "Separator: %s\n", yytext ); return BAR;}

"{"[^}\n]*"}"	/* elimina comentarii */ {}

[ \t]+	/* elimina spatii */  	{}

[\n]+	{++lines;}

[a-zA-Z][a-zA-Z0-9]{8,}	{printf("Illegal size of the identifier at line %d\n", lines); return -1;}

[0-9][a-zA-Z0-9]{0,7}	{printf("Illegal identifier at line %d\n", lines); return -1;}
		 
.	{printf("Illegal symbol at line\n"); return -1;}
%% 